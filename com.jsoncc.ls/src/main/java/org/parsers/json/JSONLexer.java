/* Generated by: JavaCC 21 Parser Generator. JSONLexer.java */
package org.parsers.json;

import static org.parsers.json.JSONConstants.TokenType.*;
import java.io.Reader;
import java.io.IOException;
import java.util.logging.Logger;
import java.util.*;
@SuppressWarnings("unused")
public class JSONLexer implements JSONConstants {
    private static final Logger LOGGER= Logger.getLogger("JSONParser");
    private boolean trace_enabled= false;
    public String getInputSource() {
        return inputSource;
    }

    public void setInputSource(String inputSource) {
        this.inputSource= inputSource;
        input_stream.setInputSource(inputSource);
    }

    public JSONLexer(CharSequence chars) {
        this("input", chars);
    }

    public JSONLexer(String inputSource, CharSequence chars) {
        this(inputSource, chars, LexicalState.JSON, 1, 1);
    }

    public JSONLexer(String inputSource, CharSequence chars, LexicalState lexState, int line, int column) {
        this.inputSource= inputSource;
        input_stream= new FileLineMap(inputSource, chars, line, column);
        switchTo(lexState);
    }

    public JSONLexer(Reader reader) {
        this("input", reader, LexicalState.JSON, 1, 1);
    }

    public JSONLexer(String inputSource, Reader reader) {
        this(inputSource, reader, LexicalState.JSON, 1, 1);
    }

    public JSONLexer(String inputSource, Reader reader, LexicalState lexState, int line, int column) {
        this.inputSource= inputSource;
        input_stream= new FileLineMap(inputSource, reader, line, column);
        switchTo(lexState);
    }

    FileLineMap input_stream;
    public final void backup(int amount) {
        input_stream.backup(amount);
    }

    LexicalState lexicalState= LexicalState.JSON;
    /** Switch to specified lexical state. */
    public boolean switchTo(LexicalState lexState) {
        if (this.lexicalState!=lexState) {
            if (trace_enabled) LOGGER.info("Switching from lexical state "+this.lexicalState+" to "+lexState);
            this.lexicalState= lexState;
            return true;
        }
        return false;
    }

    private InvalidToken invalidToken;
    private Token previousToken;
    public Token getNextToken() {
        Token token= null;
        do {
            token= nextToken();
        }
        while (token instanceof InvalidToken);
        if (invalidToken!=null) {
            invalidToken.setNextToken(token);
            token.setPreviousToken(invalidToken);
            Token it= invalidToken;
            this.invalidToken= null;
            return it;
        }
        token.setPreviousToken(previousToken);
        if (previousToken!=null) previousToken.setNextToken(token);
        return previousToken= token;
    }

    static public String addEscapes(String s) {
        return ParseException.addEscapes(s);
    }

    // Reset the token source input
    // to just after the Token passed in.
    void reset(Token t, LexicalState state) {
        input_stream.goTo(t.getEndLine(), t.getEndColumn());
        input_stream.forward(1);
        t.setNext(null);
        t.setNextToken(null);
        if (state!=null) {
            switchTo(state);
        }
    }

    void reset(Token t) {
        reset(t, null);
    }

    FileLineMap getFileLineMap() {
        return input_stream;
    }

    private int jjnewStateCnt;
    private int jjround;
    private int jjmatchedPos;
    //FIXME,should be an enum.
    private int jjmatchedKind;
    private TokenType matchedType;
    private String inputSource= "input";
    // BitSet for TOKEN
    static private BitSet tokenSet= BitSet.valueOf(new long[]{542717L, });
    // BitSet for SPECIAL
    static private BitSet specialSet= BitSet.valueOf(new long[]{0L, });
    private final int[] jjrounds= new int[21];
    private final int[] jjstateSet= new int[42];
    private final StringBuilder image= new StringBuilder();
    private int matchedCharsLength;
    char curChar;
    private Token generateEOF() {
        if (trace_enabled) LOGGER.info("Returning the <EOF> token.");
        jjmatchedKind= 0;
        matchedType= TokenType.EOF;
        Token eof= jjFillToken();
        tokenLexicalActions();
        return eof;
    }

    private Token nextToken() {
        Token matchedToken;
        int curPos= 0;
        EOFLoop:
        while (true) {
            curChar= (char) input_stream.beginToken();
            if (curChar== (char)-1) {
                return generateEOF();
            }
            image.setLength(0);
            matchedCharsLength= 0;
            jjmatchedKind= 0x7FFFFFFF;
            matchedType= null;
            jjmatchedPos= 0;
            if (trace_enabled) LOGGER.info("Current character : "+addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
            curPos= jjMoveStringLiteralDfa0_JSON();
            if (jjmatchedKind!=0x7FFFFFFF) {
                if (jjmatchedPos+1<curPos) {
                    if (trace_enabled) LOGGER.info("   Putting back "+(curPos-jjmatchedPos-1)+" characters into the input stream.");
                    input_stream.backup(curPos-jjmatchedPos-1);
                }
                if (trace_enabled) LOGGER.info("****** FOUND A "+tokenImage[jjmatchedKind]+" MATCH ("+addEscapes(input_stream.getSuffix(jjmatchedPos+2))+") ******\n");
                if (tokenSet.get(jjmatchedKind)||specialSet.get(jjmatchedKind)) {
                    matchedToken= jjFillToken();
                    tokenLexicalActions();
                    jjmatchedKind= matchedToken.getType().ordinal();
                    matchedToken.setUnparsed(specialSet.get(jjmatchedKind));
                    return matchedToken;
                }
                else {
                    continue EOFLoop;
                }
            }
            int error_line= input_stream.getEndLine();
            int error_column= input_stream.getEndColumn();
            String error_after= null;
            error_after= curPos<=1?"":
            input_stream.getImage();
            if (invalidToken== null) {
                invalidToken= new InvalidToken(""+curChar, inputSource);
                invalidToken.setBeginLine(error_line);
                invalidToken.setBeginColumn(error_column);
            }
            else {
                invalidToken.setImage(invalidToken.getImage()+curChar);
            }
            invalidToken.setEndLine(error_line);
            invalidToken.setEndColumn(error_column);
            return invalidToken;
        }
    }

    private void tokenLexicalActions() {
        switch(jjmatchedKind) {
        }
    }

    private Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        curTokenImage= input_stream.getImage();
        beginLine= input_stream.getBeginLine();
        beginColumn= input_stream.getBeginColumn();
        endLine= input_stream.getEndLine();
        endColumn= input_stream.getEndColumn();
        t= Token.newToken(TokenType.values()[jjmatchedKind], curTokenImage, this);
        t.setBeginLine(beginLine);
        t.setEndLine(endLine);
        t.setBeginColumn(beginColumn);
        t.setEndColumn(endColumn);
        //        t.setInputSource(this.inputSource);
        return t;
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state]!=jjround) {
            jjstateSet[jjnewStateCnt++]= state;
            jjrounds[state]= jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++]= jjnextStates[start];
        }
        while (start++!=end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        }
        while (start++!=end);
    }

    private void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start+1]);
    }

    private static boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch(hiByte) {
            case 0:
            return(jjbitVec2[i2]&l2)!=0L;
            default:
            if ((jjbitVec0[i1]&l1)!=0L) {
                return(jjbitVec1[i2]&l2)!=0L;
            }
            return false;
        }
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind= kind;
        jjmatchedPos= pos;
        if (trace_enabled) LOGGER.info("   No more string literal token matches are possible.");
        if (trace_enabled) LOGGER.info("   Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
        return pos+1;
    }

    private static final long[] jjbitVec0= {0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL};
    private static final long[] jjbitVec1= {0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL};
    private static final long[] jjbitVec2= {0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL};
    private int jjStartNfa_JSON(int pos, long active0) {
        return jjMoveNfa_JSON(jjStopStringLiteralDfa_JSON(pos, active0), pos+1);
    }

    private final int jjStopStringLiteralDfa_JSON(int pos, long active0) {
        if (trace_enabled) LOGGER.info("   No more string literal token matches are possible.");
        switch(pos) {
            case 0:
            if ((active0&0x8000L)!=0L) {
                jjmatchedKind= 19;
                jjmatchedPos= 0;
                return 21;
            }
            return-1;
            default:
            return-1;
        }
    }

    private int jjMoveStringLiteralDfa0_JSON() {
        switch(curChar) {
            case 44:
            return jjStopAtPos(0, 3);
            case 58:
            return jjStopAtPos(0, 2);
            case 91:
            return jjStopAtPos(0, 4);
            case 93:
            return jjStopAtPos(0, 5);
            case 102:
            return jjMoveStringLiteralDfa1_JSON(0x200L);
            case 110:
            return jjMoveStringLiteralDfa1_JSON(0x400L);
            case 116:
            return jjMoveStringLiteralDfa1_JSON(0x100L);
            case 123:
            return jjStopAtPos(0, 6);
            case 125:
            return jjStopAtPos(0, 7);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            return jjMoveNfa_JSON(1, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_JSON(long active0) {
        int retval= input_stream.readChar();
        if (retval>=0) {
            curChar= (char) retval;
        }
        else {
            jjStopStringLiteralDfa_JSON(0, active0);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 1;
        }
        if (trace_enabled) LOGGER.info(""+"Current character : "+addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 97:
            return jjMoveStringLiteralDfa2_JSON(active0, 0x200L);
            case 114:
            return jjMoveStringLiteralDfa2_JSON(active0, 0x100L);
            case 117:
            return jjMoveStringLiteralDfa2_JSON(active0, 0x400L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JSON(0, active0);
    }

    private int jjMoveStringLiteralDfa2_JSON(long old0, long active0) {
        active0= active0&old0;
        if ((active0)== 0L) return jjStartNfa_JSON(0, old0);
        int retval= input_stream.readChar();
        if (retval>=0) {
            curChar= (char) retval;
        }
        else {
            jjStopStringLiteralDfa_JSON(1, active0);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 2;
        }
        if (trace_enabled) LOGGER.info(""+"Current character : "+addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 108:
            return jjMoveStringLiteralDfa3_JSON(active0, 0x600L);
            case 117:
            return jjMoveStringLiteralDfa3_JSON(active0, 0x100L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JSON(1, active0);
    }

    private int jjMoveStringLiteralDfa3_JSON(long old0, long active0) {
        active0= active0&old0;
        if ((active0)== 0L) return jjStartNfa_JSON(1, old0);
        int retval= input_stream.readChar();
        if (retval>=0) {
            curChar= (char) retval;
        }
        else {
            jjStopStringLiteralDfa_JSON(2, active0);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 3;
        }
        if (trace_enabled) LOGGER.info(""+"Current character : "+addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 101:
            if ((active0&0x100L)!=0L) return jjStopAtPos(3, 8);
            break;
            case 108:
            if ((active0&0x400L)!=0L) return jjStopAtPos(3, 10);
            break;
            case 115:
            return jjMoveStringLiteralDfa4_JSON(active0, 0x200L);
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JSON(2, active0);
    }

    private int jjMoveStringLiteralDfa4_JSON(long old0, long active0) {
        active0= active0&old0;
        if ((active0)== 0L) return jjStartNfa_JSON(2, old0);
        int retval= input_stream.readChar();
        if (retval>=0) {
            curChar= (char) retval;
        }
        else {
            jjStopStringLiteralDfa_JSON(3, active0);
            if (trace_enabled&&jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                LOGGER.info("    Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token. ");
            }
            return 4;
        }
        if (trace_enabled) LOGGER.info(""+"Current character : "+addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        switch(curChar) {
            case 101:
            if ((active0&0x200L)!=0L) return jjStopAtPos(4, 9);
            break;
            default:
            if (trace_enabled) LOGGER.info("   No string literal matches possible.");
            break;
        }
        return jjStartNfa_JSON(3, active0);
    }

    private int jjMoveNfa_JSON(int startState, int curPos) {
        int startsAt= 0;
        jjnewStateCnt= 21;
        int i= 1;
        jjstateSet[0]= startState;
        int kind= 0x7fffffff;
        while (true) {
            if (++jjround== 0x7fffffff) {
                jjround= 0x80000001;
                Arrays.fill(jjrounds, 0x80000000);
            }
            if (curChar<64) {
                long l= 1L<<curChar;
                do {
                    switch(jjstateSet[--i]) {
                        case 1:
                        if ((0x3fe000000000000L&l)!=0L) {
                            if (kind> 19) kind= 19;
                            jjAddStates(0, 2);
                        }
                        else if ((0x100002600L&l)!=0L) {
                            if (kind> 1) kind= 1;
                            jjstateSet[jjnewStateCnt++]= 0;
                        }
                        else if ((0x1000000000000L&l)!=0L) {
                            if (kind> 19) kind= 19;
                            jjAddStates(3, 4);
                        }
                        else if ((0x200000000000L&l)!=0L) jjAddStates(5, 6);
                        else if ((0x400000000L&l)!=0L) jjCheckNAddStates(7, 10);
                        break;
                        case 21:
                        case 14:
                        if ((0x400000000000L&l)!=0L) jjCheckNAdd(15);
                        break;
                        case 0:
                        if ((0x100002600L&l)== 0L) break;
                        if (kind> 1) kind= 1;
                        jjCheckNAdd(0);
                        break;
                        case 2:
                        if ((0xfffffffb00000000L&l)!=0L) jjAddStates(11, 14);
                        break;
                        case 3:
                        if ((0x400000000L&l)!=0L&&kind> 14) kind= 14;
                        break;
                        case 5:
                        if ((0x3ff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]= 6;
                        break;
                        case 6:
                        if ((0x3ff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]= 7;
                        break;
                        case 7:
                        if ((0x3ff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]= 8;
                        break;
                        case 8:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddStates(11, 14);
                        break;
                        case 11:
                        if ((0x800400000000L&l)!=0L) jjCheckNAddStates(11, 14);
                        break;
                        case 12:
                        if ((0x200000000000L&l)!=0L) jjCheckNAddTwoStates(13, 19);
                        break;
                        case 13:
                        if ((0x1000000000000L&l)== 0L) break;
                        if (kind> 19) kind= 19;
                        jjCheckNAddTwoStates(14, 16);
                        break;
                        case 15:
                        if ((0x3ff000000000000L&l)== 0L) break;
                        if (kind> 19) kind= 19;
                        jjAddStates(15, 16);
                        break;
                        case 17:
                        if ((0x280000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]= 18;
                        break;
                        case 18:
                        if ((0x3fe000000000000L&l)== 0L) break;
                        if (kind> 19) kind= 19;
                        jjstateSet[jjnewStateCnt++]= 18;
                        break;
                        case 19:
                        if ((0x3fe000000000000L&l)== 0L) break;
                        if (kind> 19) kind= 19;
                        jjCheckNAddStates(0, 2);
                        break;
                        case 20:
                        if ((0x3ff000000000000L&l)== 0L) break;
                        if (kind> 19) kind= 19;
                        jjAddStates(17, 19);
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else if (curChar<128) {
                long l= 1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 21:
                        case 16:
                        if ((0x2000000020L&l)!=0L) jjCheckNAdd(17);
                        break;
                        case 2:
                        if ((0xffffffffefffffffL&l)!=0L) jjAddStates(11, 14);
                        break;
                        case 4:
                        if ((0x20000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]= 5;
                        break;
                        case 5:
                        if ((0x7e0000007eL&l)!=0L) jjstateSet[jjnewStateCnt++]= 6;
                        break;
                        case 6:
                        if ((0x7e0000007eL&l)!=0L) jjstateSet[jjnewStateCnt++]= 7;
                        break;
                        case 7:
                        if ((0x7e0000007eL&l)!=0L) jjstateSet[jjnewStateCnt++]= 8;
                        break;
                        case 8:
                        if ((0x7e0000007eL&l)!=0L) jjCheckNAddStates(11, 14);
                        break;
                        case 9:
                        if ((0x10000000L&l)!=0L) jjstateSet[jjnewStateCnt++]= 4;
                        break;
                        case 10:
                        if ((0x10000000L&l)!=0L) jjstateSet[jjnewStateCnt++]= 11;
                        break;
                        case 11:
                        if ((0x14404410000000L&l)!=0L) jjCheckNAddStates(11, 14);
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else {
                int hiByte= (int)(curChar>>8);
                int i1= hiByte>>6;
                long l1= 1L<<(hiByte&077);
                int i2= (curChar&0xff)>>6;
                long l2= 1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 2:
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) jjAddStates(11, 14);
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            if (kind!=0x7fffffff) {
                jjmatchedKind= kind;
                jjmatchedPos= curPos;
                kind= 0x7fffffff;
            }
            ++curPos;
            if (jjmatchedKind!=0&&jjmatchedKind!=0x7fffffff) {
                if (trace_enabled) LOGGER.info("   Currently matched the first "+(jjmatchedPos+1)+" characters as a "+tokenImage[jjmatchedKind]+" token.");
            }
            if ((i= jjnewStateCnt)== (startsAt= 21-(jjnewStateCnt= startsAt))) return curPos;
            int retval= input_stream.readChar();
            if (retval>=0) {
                curChar= (char) retval;
            }
            else {
                return curPos;
            }
            if (trace_enabled) LOGGER.info(""+addEscapes(String.valueOf(curChar))+" ("+(int) curChar+") "+"at line "+input_stream.getEndLine()+" column "+input_stream.getEndColumn());
        }
    }

    private static final int[] jjnextStates= {20, 14, 16, 14, 16, 13, 19, 2, 9, 10, 3, 3, 2, 9, 10, 15, 16, 14, 16, 20};
}
